
"""
1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
который должен принимать данные (список списков) для формирования матрицы.
Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
Примеры матриц вы найдете в методичке.
Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов
класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки
первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.
"""

print("Task № 1")
from functools import reduce
class Matrix:
    def __init__(self, rows):
        self.matr = rows

    def __str__(self):  # представление матрицы в виде набора строк
        self.row = ''
        for i in range(len(self.matr)):
            self.par = len(self.matr[i])
            for j in range(self.par - 1):
                self.row += str(self.matr[i][j]) + ' '
            self.row += str(self.matr[i][self.par - 1]) + '\n'
        return self.row

    def __add__(self, other):
        self.row_list = []
        for i in range(len(self.matr)):
            self.row_list.append([x + y for x, y in zip(self.matr[i], other.matr[i])])
        return Matrix(self.row_list)

mtrx1 = Matrix([[2, 3, 4], [5, 1, 2]])
print(mtrx1)
mtrx2 = Matrix([[1, 5, 10], [3, 7, 2]])
print(mtrx2)
mtrx3 = mtrx1 + mtrx2
print(mtrx3)

"""
2. Реализовать проект расчета суммарного расхода ткани на производство одежды. Основная сущность (класс) этого проекта 
— одежда, которая может иметь определенное название. К типам одежды в этом проекте относятся пальто и костюм. 
У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма). Это могут быть обычные числа: V и H, 
соответственно.
Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 0.5), 
для костюма (2 * H + 0.3). Проверить работу этих методов на реальных данных.
Реализовать общий подсчет расхода ткани. Проверить на практике полученные на этом уроке знания: 
реализовать абстрактные классы для основных классов проекта, проверить на практике работу декоратора @property.
"""

print("\nTask № 2")
# 1-й способ решения: создаётся только один класс "Одежа", разделение на типы происходит с помощью декоратора decorator_par
# На самом деле пытался это сделать с помощью сеттера декоратора property непосредственно в классе. Но в итоге пришел к выводу,
# что c помощью сеттера можно задать значения только из вне класса, а если значения меняются внутри класса, то он их не задаёт?

def decorator_par(meth): #декоратор для изменения входных параметров в функцию расчета расхода ткани в зависимости от типа одежды
    def get_it(self):
        if self.cloth_type == 'V':  # пальто
            par = (1 / 6.5, 0.5)
            return meth(self, par)
        elif self.cloth_type == 'H':  # костюм
            par = (2, 0.3)
            return meth(self, par)
        elif self.cloth_type == 'A':  # общее (пальто + костюм)
            par = (1 / 6.5 + 2 * self.size2 / self.size, 0.8)
            return meth(self, par)
        else:
            print(f"Считайте сами! Тип одежды {self.cloth_type} не определён.")
    return get_it


class Clothes:
    def __init__(self, cloth_type, size, size2 = None):
        self.cloth_type = cloth_type
        self.size = size
        self.size2 = size2

    @decorator_par
    def amm_calc(self, par):  #общая функция расчёта расхода ткани
        return par[0] * self.size + par[1]


cl = Clothes('V', 3)
print('Пальто ', cl.amm_calc())
cl2 = Clothes('H', 10)
print('Костюм ', cl2.amm_calc())
cl3 = Clothes('S', 10)
print(cl3.amm_calc())
cl4 = Clothes('A', 3, 10)
print('Общее ', cl4.amm_calc())

# 2-й способ с использованием отдельных дочерних классов для пальто и костюма и требуемого абстрактного класса и property
from abc import ABC, abstractmethod
class Clothes(ABC):
    def __init__(self, size, size2 = None):
        self.size = size
        self.size2 = size2

    @abstractmethod
    def amm_calc(self):
        pass

class Coat(Clothes): #пальто
    @property
    def amm_calc(self):
        return self.size / 6.5 + 0.5

class Suit(Clothes): #костюм
    @property
    def amm_calc(self):
        return 2 * self.size + 0.3

class Total(Clothes): # общее (пальто + костюм)
    @property
    def amm_calc(self):
        if self.size2 != None:
            return self.size / 6.5 + 2 * self.size2 + 0.8
        else:
            print('Введите размер для костюма!')

print('------------------')
ct = Coat(3)
print(ct.amm_calc)
st = Suit(10)
print(st.amm_calc)
cm = Total(3)
print(cm.amm_calc)
cm = Total(3,10)
print(cm.amm_calc)

"""
3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. 
В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). 
В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), 
вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное 
(с округлением до целого)  деление клеток, соответственно. 
Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток 
больше нуля, иначе выводить соответствующее сообщение.
Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества 
ячеек этих двух клеток.
Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление 
количества ячеек этих двух клеток.
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. 
Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: 
*****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: 
*****\n*****\n*****.
"""

print("\nTask № 3")
class Cell:
    def __init__(self, ex):
        self.ex = ex

    def __add__(self, other):
        print(f'Одна клетка с {self.ex + other.ex} ячеками')

    def __sub__(self, other):
        self.s = self.ex - other.ex
        print(f'Одна клетка с {self.s} ячеками') if self.s > 0 else print('Так нельзя!')

    def __mul__(self, other):
        print(f'Одна клетка с {self.ex * other.ex} ячеками')

    def __truediv__(self, other):
        print(f'Одна клетка с {self.ex // other.ex} ячеками')

    def make_order(self, cell_num):
        self.cell_num = cell_num
        print((self.ex // cell_num) * (cell_num * '*' + '\n') + (self.ex % cell_num) * '*')

cl1 = Cell(12)
cl2 = Cell(15)
cl1+cl2
cl1*cl2
cl1-cl2
cl2-cl1
cl1/cl2
cl2/cl1
cl1.make_order(7)
cl2.make_order(7)
cl3 = Cell(4)
cl3.make_order(5)
