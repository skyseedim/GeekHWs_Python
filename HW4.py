"""
1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы
сотрудника. В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
"""

# см. sal_county.py

"""
2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше 
предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. 
Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
"""

print("Task № 2")
my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55, 70]
print("Исходный список: ", my_list)
res = [my_list[i] for i in range(1, len(my_list)) if my_list[i] - my_list[i-1] > 0]
print("Результат: ", res)

"""
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. 
Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.
"""

print("\nTask № 3\n Для чисел [20; 240], кратные 20 или 21: \n",\
      [el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0])

"""
4. Представлен список чисел. Определить элементы списка, не имеющие повторений. 
Сформировать итоговый массив чисел, соответствующих требованию. 
Элементы вывести в порядке их следования в исходном списке. 
Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
"""

print("\nTask № 4")
import collections
my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print("Исходный список: \n", my_list)
c = collections.Counter(my_list)
res = [el for el in c.keys() if c[el] == 1]
print("Элементы, не имеющие повторений: \n", res)

"""
5. Реализовать формирование списка, используя функцию range() и возможности генератора. 
В список должны войти четные числа от 100 до 1000 (включая границы). 
Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
"""

print("\nTask № 5")
from functools import reduce
my_list = [el for el in range(100, 1001, 2)]
def my_func(prev_el, el):
    return(prev_el * el)
print("Произведение всех чётных чисел [100;1000]: \n",reduce(my_func, my_list))

"""
6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, 
что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем 
цикл. Во втором также необходимо предусмотреть условие, при котором повторение элементов списка 
будет прекращено.
"""

print("\nTask № 6")
from itertools import count, cycle
print("а) итератор, генерирующий целые числа, начиная с указанного:")
for el in count(3):
    if el > 10:
        break
    else:
        print(el)
print("б) итератор, повторяющий элементы некоторого списка, определенного заранее:")
my_list = [1, 2, 3]
c = 0
for el in cycle(my_list):
    print(el)
    c += 1
    if c > 10:
        break

"""
7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: 
for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить 
только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, 
факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
"""

print("\nTask № 7")
def fact(n):
    k = 1
    for i in range(1, n + 1):
        k *= i
        yield k

for el in fact(10):
    print(el)
